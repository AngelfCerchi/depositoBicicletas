import bicicletas.*
import accesorios.*
import depositos.*

describe "Test Bicicletas"{
	//Accesorios
	const farolito = new Farolitos()
	const canastoDos = new Canastos(volumen = 8)
	const morralDos = new Morrales(largo=21,ojoDeGato = true)
	const morralTres = new Morrales(largo=6,ojoDeGato = false)
	
	//Bicicletas
	const bicicletaUno = new Bicicletas(rodado=28,largo=150,marca="Olmo",accesorios=[farolito])
	const bicicletaDos = new Bicicletas(rodado=26,largo=110,marca="Legnano",accesorios=[farolito,canastoDos,morralDos]) 
	const bicicletaTres = new Bicicletas(rodado=20,largo=80,marca="Legnano",accesorios=[morralTres])
	
	test "biciletaUno"{
		assert.equals(85,bicicletaUno.altura())
		assert.equals(34,bicicletaUno.velocidadCrucero()) 
		assert.equals(0,bicicletaUno.carga())
		assert.equals(14.5,bicicletaUno.peso())
		assert.that(bicicletaUno.tieneLuz())
		assert.equals(1,bicicletaUno.cantAccLivianos())
	}
	test "bicicletaDos"{
		assert.equals(80,bicicletaDos.altura())
		assert.equals(28,bicicletaDos.velocidadCrucero()) 
		assert.equals(23,bicicletaDos.carga())
		assert.equals(15.5,bicicletaDos.peso())
		assert.that(bicicletaDos.tieneLuz())
		assert.equals(2,bicicletaDos.cantAccLivianos())
	}
	test "bicicletaTres"{
		assert.equals(65,bicicletaTres.altura())
		assert.equals(22,bicicletaTres.velocidadCrucero()) 
		assert.equals(2,bicicletaTres.carga())
		assert.equals(11.2,bicicletaTres.peso())
		assert.notThat(bicicletaTres.tieneLuz())
		assert.equals(0,bicicletaTres.cantAccLivianos())
	}

}

describe "Test de depositos"{
	//Accesorios
	const farolito = new Farolitos()
	const canastoDos = new Canastos(volumen = 8)
	const morralDos = new Morrales(largo=21,ojoDeGato = true)
	const morralTres = new Morrales(largo=6,ojoDeGato = false)
	
	//Bicicletas
	const bicicletaUno = new Bicicletas(rodado=28,largo=150,marca="Olmo",accesorios=[farolito])
	const bicicletaDos = new Bicicletas(rodado=26,largo=110,marca="Legnano",accesorios=[farolito,canastoDos,morralDos]) 
	const bicicletaTres = new Bicicletas(rodado=20,largo=80,marca="Legnano",accesorios=[morralTres])
	const bicicletaCuatro = new Bicicletas(rodado = 28, largo = 180,marca="Olmo")
	const depositoUno = new Depositos(todasLasBicis=[bicicletaUno,bicicletaDos,bicicletaTres])
	const depositoDos = new Depositos(todasLasBicis=[bicicletaUno,bicicletaDos])
	const depositoTres = new Depositos(todasLasBicis=[bicicletaCuatro])
	
	test "Deposito no Nocturno"{
		assert.equals([bicicletaUno,bicicletaDos],depositoUno.bicisRapidas())
		assert.equals(#{'Olmo','Legnano'},depositoUno.todasLasMarcas())
		assert.notThat(depositoUno.esNocturno())
		assert.that(depositoUno.tieneBiciParaLlevar(10))
		assert.notThat(depositoUno.tieneBiciParaLlevar(50))
		assert.equals(0,depositoUno.cargaTotalBicisLargas())
		assert.equals(0,depositoUno.cantidadBicisSinAccesorios())
	
	}
	test "Deposito Nocturno"{
		assert.equals([bicicletaUno,bicicletaDos],depositoDos.bicisRapidas())
		assert.equals(#{'Olmo','Legnano'},depositoDos.todasLasMarcas())
		assert.that(depositoDos.esNocturno())
		assert.that(depositoDos.tieneBiciParaLlevar(10))	
  		assert.notThat(depositoDos.tieneBiciParaLlevar(50))
  		assert.equals(0,depositoDos.cargaTotalBicisLargas())
  		assert.equals(0,depositoDos.cantidadBicisSinAccesorios())
  		
	}
	test "Deposito no nocturno - biciLarga"{
		assert.equals([bicicletaCuatro],depositoTres.bicisRapidas())
		assert.equals(#{'Olmo'},depositoTres.todasLasMarcas())
		assert.notThat(depositoTres.esNocturno())
		assert.notThat(depositoTres.tieneBiciParaLlevar(10))	
  		assert.notThat(depositoTres.tieneBiciParaLlevar(50))
  		assert.equals(0,depositoTres.cargaTotalBicisLargas())
  		assert.equals(1,depositoTres.cantidadBicisSinAccesorios())
	}
	
}
describe "Test bicis companieras"{
	const bici1 = new Bicicletas(rodado= 28, largo = 177, marca = 'Olmo')
	const bici2 = new Bicicletas(rodado= 26, largo= 180, marca='Legnano')
	const bici3 = new Bicicletas(rodado= 26, largo= 190, marca='Legnano')
	const deposito = new Depositos()
	
	method initialize(){
		deposito.agregarBicicleta(bici1)
		deposito.agregarBicicleta(bici2)
		deposito.agregarBicicleta(bici3)
	}
	test "Lista de bicis companieras"{
		assert.equals(deposito.bicisCompanieras(bici2), [bici3])
	}	
	test "Hay companieras?"{
		assert.that(deposito.hayCompanieras())
	}
}


	